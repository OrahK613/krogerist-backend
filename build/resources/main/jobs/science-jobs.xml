<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

       <job id="businessRuleJob" xmlns="http://www.springframework.org/schema/batch">
              <step id="businessRuleLoad" next="yellowTagLoad">
                     <tasklet>
                            <chunk reader="businessRuleFileItemReader" writer="businessRuleWriter"
                                   commit-interval="${job.commit.interval}" />
                     </tasklet>
              </step>
              <step id="yellowTagLoad">
                     <tasklet>
                            <chunk reader="yellowTagFileItemReader" writer="yellowTagWriter"
                                   commit-interval="${job.commit.interval}" />
                     </tasklet>
              </step>

       </job>



       <bean id="businessRuleWriter" class="krogerist.batch.BusinessRuleItemWriter">
              <property name="businessRuleDao">
                     <bean class="krogerist.batch.JdbcBusinessRuleDao">
                            <property name="dataSource" ref="dataSource" />
                     </bean>
              </property>
       </bean>

       <bean id="yellowTagWriter" class="krogerist.batch.JdbcYellowTagDao">
              <property name="dataSource" ref="dataSource" />
       </bean>


       <bean id="businessRuleFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
              <property name="resource" value="classpath:data/${hackathon.rules.file.name}" />
              <property name="lineMapper">
                     <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                            <property name="lineTokenizer">
                                   <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                                          <property name="names" value="rank, science, scienceRank" />
                                   </bean>
                            </property>
                            <property name="fieldSetMapper">
                                   <bean class="krogerist.domain.BusinessRuleFieldSetMapper" />
                            </property>
                     </bean>
              </property>
       </bean>

       <bean id="yellowTagFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
              <property name="resource" value="classpath:data/${hackathon.matt.yellowTag.file.name}" />
              <property name="lineMapper">
                     <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                            <property name="lineTokenizer">
                                   <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                                          <property name="names" value="rank, customerId, upc, basePrice, promoPrice, itemDescription, imageUrl" />
                                   </bean>
                            </property>
                            <property name="fieldSetMapper">
                                   <bean class="krogerist.domain.YellowTagFieldSetMapper" />
                            </property>
                     </bean>
              </property>
       </bean>


       <aop:config>
              <aop:aspect id="moduleLogging" ref="logAdvice">
                     <aop:after
                             pointcut="execution( * org.springframework.batch.item.ItemWriter+.write(..)) and args(item)"
                             method="doStronglyTypedLogging" />
              </aop:aspect>
              <aop:aspect ref="eventAdvice">
                     <aop:before
                             pointcut="execution( * org.springframework.batch..Step+.execute(..)) and args(stepExecution)"
                             method="before" />
                     <aop:after
                             pointcut="execution( * org.springframework.batch..Step+.execute(..)) and args(stepExecution)"
                             method="after" />
                     <aop:after-throwing throwing="t"
                                         pointcut="execution( * org.springframework.batch..Step+.execute(..)) and args(stepExecution)"
                                         method="onError" />
              </aop:aspect>
       </aop:config>

       <bean id="scienceProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
              <property name="properties">
                     <value>
                            hackathon.rules.file.name=hackathon_rules.csv
                            hackathon.matt.yellowTag.file.name=hackathon_matt_yellow_tag.csv
                            job.commit.interval=2
                     </value>
              </property>
              <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
              <property name="ignoreUnresolvablePlaceholders" value="true" />
              <property name="order" value="1" />
       </bean>
</beans>